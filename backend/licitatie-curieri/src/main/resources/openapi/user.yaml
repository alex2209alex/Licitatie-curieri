openapi: 3.0.3
info:
  version: 1.0.0
  title: User management
  description: API related to management of Users.
paths:
  /users/signup:
    post:
      tags:
        - User
      summary: Creates a User of type client or courier
      operationId: createUser
      requestBody:
        description: Request body contains information related to new User
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreation'
        required: true
      responses:
        '201':
          description: Resource successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreationResponse'
        '400':
          description: Request body is invalid.
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/components/schemas/GenericApplicationError'
        '500':
          description: Email sender has an error.
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/components/schemas/GenericApplicationError'
  /users/{email}/verification:
    put:
      tags:
        - User
      summary: Verifies a User
      operationId: verifyUser
      parameters:
        - name: email
          required: true
          in: path
          description: Email of User to be verified
          example: bogdan.popescu@gmail.com
          schema:
            type: string
      requestBody:
        description: Request body contains information related to verification codes
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserVerification'
        required: true
      responses:
        '200':
          description: User successfully verified.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: Request body is invalid.
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/components/schemas/GenericApplicationError'
        '403':
          description: Verification deadline expired. User was deleted.
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/components/schemas/GenericApplicationError'
  /users/login:
    post:
      tags:
        - User
      summary: Authenticates a User
      operationId: authenticateUser
      requestBody:
        description: Credentials needed for user authentication
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
        required: true
      responses:
        '200':
          description: Two factor code was sent (!!TBA...)
        '401':
          description: Authentication failed due to invalid credentials.
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/components/schemas/GenericApplicationError'
        '500':
          description: Email sender has an error.
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/components/schemas/GenericApplicationError'
  /users/getTwoFACode:
    put:
      tags:
        - User
      summary: Two Factor Auth with email code for an User
      operationId: getTwoFACodeUser
      requestBody:
        description: Request body contains information related to verification code and email
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserTwoFAVerification'
        required: true
      responses:
        '200':
          description: User successfully verified.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '403':
          description: Verification deadline expired. User was deleted.
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/components/schemas/GenericApplicationError'
        '404':
          description: User was not found.
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/components/schemas/GenericApplicationError'
components:
  schemas:
    UserCreation:
      type: object
      required:
        - firstName
        - lastName
        - email
        - phoneNumber
        - password
        - passwordConfirmation
        - userType
      properties:
        firstName:
          description: User's first name
          type: string
          maxLength: 50
          example: Bogdan
        lastName:
          description: User's last name
          type: string
          maxLength: 50
          example: Popescu
        email:
          description: User's email
          type: string
          maxLength: 50
          example: bogdan.popescu@gmail.com
        phoneNumber:
          description: User's phone number
          type: string
          maxLength: 50
          example: "+40123456789"
        password:
          description: User's password. Should be same as passwordConfirmation
          type: string
          minLength: 8
          maxLength: 50
          example: examplePassword1!
        passwordConfirmation:
          description: User's password. Should be same as password
          type: string
          minLength: 8
          maxLength: 50
          example: examplePassword1!
        userType:
          $ref: '#/components/schemas/UserType'
    UserCreationResponse:
      type: object
      properties:
        id:
          description: User's ID
          type: integer
          format: int64
          example: 100
        firstName:
          description: User's first name
          type: string
          example: Bogdan
        lastName:
          description: User's last name
          type: string
          example: Popescu
        email:
          description: User's email
          type: string
          example: bogdan.popescu@gmail.com
        phoneNumber:
          description: User's phone number
          type: string
          example: "+40123456789"
        userType:
          $ref: '#/components/schemas/UserType'
    UserVerification:
      type: object
      required:
        - emailVerificationCode
        - phoneVerificationCode
      properties:
        emailVerificationCode:
          description: Email verification code
          type: string
          example: 12345
        phoneVerificationCode:
          description: Phone verification code
          type: string
          example: 12345
    UserType:
      type: string
      description: Type of User in the application
      example: CLIENT
      enum:
        - CLIENT
        - COURIER
        - RESTAURANT_ADMIN
    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: Registered user's email
          example: user@example.com
        password:
          type: string
          description: User's password
          example: securePassword123!
    TokenResponse:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          description: JSON Web Token
          example: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhbGV4X2lzYWM3MkB5YWhvby5jb20iLCJpYXQiOjE3MzQwNDI1MjcsImV4cCI6MTczNDY0NzMyN30.-lQlrmLP06IML36ls9hWzboJQrs5Udm1Uz65KY5B8aSvrui3AHSNAtqws64WuFViFuxGQe6yeKdEUsolg-uUaw
    UserTwoFAVerification:
      type: object
      required:
        - email
        - verificationCode
      properties:
        email:
          description: User's email
          type: string
          example: test.mops22@gmail.com
        verificationCode:
          description: email verification code
          type: string
          example: 123456
